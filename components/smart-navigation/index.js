// Êô∫ËÉΩÂØºËà™ÁªÑ‰ª∂
Component({
  properties: {
    // ÂΩìÂâçÈ°µÈù¢
    currentPage: {
      type: String,
      value: 'home'
    },
    // Áî®Êà∑Á±ªÂûã
    userType: {
      type: String,
      value: 'user' // user, photographer, model
    },
    // ÊòØÂê¶ÊòæÁ§∫‰∏ì‰∏öÂäüËÉΩ
    showProfessional: {
      type: Boolean,
      value: false
    }
  },

  data: {
    // Âü∫Á°ÄÂØºËà™ÈÖçÁΩÆ
    baseNavItems: [
      {
        key: 'home',
        label: 'ÂèëÁé∞',
        icon: 'home',
        activeIcon: 'home-filled',
        path: '/pages/discover/index'
      },
      {
        key: 'works',
        label: '‰ΩúÂìÅ',
        icon: 'image',
        activeIcon: 'image-filled', 
        path: '/pages/works/index'
      },
      {
        key: 'appointment',
        label: 'Á∫¶Êãç',
        icon: 'calendar',
        activeIcon: 'calendar-filled',
        path: '/pages/appointment/index'
      },
      {
        key: 'message',
        label: 'Ê∂àÊÅØ',
        icon: 'chat',
        activeIcon: 'chat-filled',
        path: '/pages/message/index',
        badge: 0
      },
      {
        key: 'profile',
        label: 'ÊàëÁöÑ',
        icon: 'user',
        activeIcon: 'user-filled',
        path: '/pages/profile/index'
      }
    ],

    // ÊëÑÂΩ±Â∏à‰∏ì‰∏öÂØºËà™
    photographerNavItems: [
      {
        key: 'dashboard',
        label: 'Â∑•‰ΩúÂè∞',
        icon: 'dashboard',
        activeIcon: 'dashboard-filled',
        path: '/pages/photographer/dashboard'
      },
      {
        key: 'portfolio',
        label: '‰ΩúÂìÅÈõÜ',
        icon: 'folder',
        activeIcon: 'folder-filled',
        path: '/pages/photographer/portfolio'
      },
      {
        key: 'orders',
        label: 'ËÆ¢Âçï',
        icon: 'order',
        activeIcon: 'order-filled',
        path: '/pages/photographer/orders',
        badge: 0
      },
      {
        key: 'earnings',
        label: 'Êî∂Áõä',
        icon: 'money',
        activeIcon: 'money-filled',
        path: '/pages/photographer/earnings'
      },
      {
        key: 'settings',
        label: 'ËÆæÁΩÆ',
        icon: 'setting',
        activeIcon: 'setting-filled',
        path: '/pages/photographer/settings'
      }
    ],

    // ‰∏≠Â§ÆÂèëÂ∏ÉÊåâÈíÆ
    centerButton: {
      icon: 'add',
      activeIcon: 'camera',
      gradient: true
    }
  },

  computed: {
    // ËÆ°ÁÆóÂΩìÂâçÂØºËà™È°π
    navItems() {
      const { userType, showProfessional } = this.data
      
      if (userType === 'photographer' && showProfessional) {
        return this.data.photographerNavItems
      }
      
      return this.data.baseNavItems
    }
  },

  methods: {
    // ÂØºËà™È°πÁÇπÂáª
    onNavItemTap(e) {
      const { item } = e.currentTarget.dataset
      const { currentPage } = this.data
      
      if (item.key === currentPage) {
        // ÂΩìÂâçÈ°µÈù¢ÔºåËß¶ÂèëÂà∑Êñ∞
        this.triggerEvent('refresh', { page: item.key })
        return
      }

      // Ëß¶ÂèëÂØºËà™‰∫ã‰ª∂
      this.triggerEvent('navigate', {
        from: currentPage,
        to: item.key,
        path: item.path
      })

      // ÊâßË°åÂØºËà™
      if (item.path.includes('tab')) {
        wx.switchTab({ url: item.path })
      } else {
        wx.navigateTo({ url: item.path })
      }
    },

    // ‰∏≠Â§ÆÊåâÈíÆÁÇπÂáª
    onCenterButtonTap() {
      const { userType } = this.data
      
      this.triggerEvent('centerAction', { userType })

      // Ê†πÊçÆÁî®Êà∑Á±ªÂûãÊòæÁ§∫‰∏çÂêåÁöÑÂèëÂ∏ÉÈÄâÈ°π
      if (userType === 'photographer') {
        this.showPhotographerPublishOptions()
      } else {
        this.showUserPublishOptions()
      }
    },

    // ÊòæÁ§∫ÊëÑÂΩ±Â∏àÂèëÂ∏ÉÈÄâÈ°π
    showPhotographerPublishOptions() {
      wx.showActionSheet({
        itemList: [
          'üì∏ ÂèëÂ∏É‰ΩúÂìÅ',
          'üìÖ ÂèëÂ∏ÉÁ∫¶ÊãçÊúçÂä°',
          'üéì ÂèëÂ∏ÉÊïôÁ®ã',
          'üõçÔ∏è ÂèëÂ∏ÉÂô®ÊùêÊé®Ëçê'
        ],
        success: (res) => {
          const actions = [
            () => wx.navigateTo({ url: '/pages/release/work' }),
            () => wx.navigateTo({ url: '/pages/release/appointment' }),
            () => wx.navigateTo({ url: '/pages/release/tutorial' }),
            () => wx.navigateTo({ url: '/pages/release/product' })
          ]
          
          if (actions[res.tapIndex]) {
            actions[res.tapIndex]()
          }
        }
      })
    },

    // ÊòæÁ§∫Áî®Êà∑ÂèëÂ∏ÉÈÄâÈ°π
    showUserPublishOptions() {
      wx.showActionSheet({
        itemList: [
          'üì∏ ÂàÜ‰∫´‰ΩúÂìÅ',
          'üîç ÂèëÂ∏ÉÁ∫¶ÊãçÈúÄÊ±Ç',
          '‚ùì Ê±ÇÂä©ÊèêÈóÆ'
        ],
        success: (res) => {
          const actions = [
            () => wx.navigateTo({ url: '/pages/release/work' }),
            () => wx.navigateTo({ url: '/pages/release/request' }),
            () => wx.navigateTo({ url: '/pages/release/question' })
          ]
          
          if (actions[res.tapIndex]) {
            actions[res.tapIndex]()
          }
        }
      })
    },

    // Êõ¥Êñ∞Ê∂àÊÅØÂæΩÁ´†
    updateMessageBadge(count) {
      const navItems = this.data.navItems
      const messageItem = navItems.find(item => item.key === 'message')
      
      if (messageItem) {
        messageItem.badge = count
        this.setData({ navItems })
      }
    },

    // Êõ¥Êñ∞ËÆ¢ÂçïÂæΩÁ´†
    updateOrderBadge(count) {
      const navItems = this.data.navItems
      const orderItem = navItems.find(item => item.key === 'orders')
      
      if (orderItem) {
        orderItem.badge = count
        this.setData({ navItems })
      }
    },

    // ÂàáÊç¢‰∏ì‰∏öÊ®°Âºè
    toggleProfessionalMode() {
      const { showProfessional } = this.data
      
      this.setData({
        showProfessional: !showProfessional
      })

      this.triggerEvent('modeChange', {
        professional: !showProfessional
      })
    }
  }
})
