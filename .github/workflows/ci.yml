name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 代码质量检查
  lint:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v3
      
    - name: 📦 设置 Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        
    - name: 📥 安装依赖
      run: npm ci
      
    - name: 🔍 ESLint 检查
      run: npm run lint
      continue-on-error: true
      
    - name: 💄 Prettier 检查
      run: npm run format:check
      continue-on-error: true

  # 构建测试
  build:
    name: 🏗️ 构建测试
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v3
      
    - name: 📦 设置 Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        
    - name: 📥 安装依赖
      run: npm ci
      
    - name: 🏗️ 构建项目
      run: npm run build
      continue-on-error: true
      
    - name: 📦 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # 后端测试
  backend-test:
    name: 🖥️ 后端测试
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dongpaidi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v3
      
    - name: 📦 设置 Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: dongpaidi-backend/package-lock.json
        
    - name: 📥 安装后端依赖
      working-directory: ./dongpaidi-backend
      run: npm ci
      
    - name: 🗄️ 数据库迁移
      working-directory: ./dongpaidi-backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dongpaidi_test
        
    - name: 🧪 运行测试
      working-directory: ./dongpaidi-backend
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dongpaidi_test
        NODE_ENV: test

  # 安全扫描
  security:
    name: 🔒 安全扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v3
      
    - name: 📦 设置 Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        
    - name: 📥 安装依赖
      run: npm ci
      
    - name: 🔒 npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: 🔍 CodeQL 分析
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 🔍 执行 CodeQL 分析
      uses: github/codeql-action/analyze@v2

  # 部署到测试环境
  deploy-staging:
    name: 🚀 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build, backend-test]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v3
      
    - name: 📦 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: 🚀 部署到测试环境
      run: |
        echo "部署到测试环境..."
        # 这里添加实际的部署脚本
        
  # 部署到生产环境
  deploy-production:
    name: 🌟 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build, backend-test, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v3
      
    - name: 📦 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
        
    - name: 🌟 部署到生产环境
      run: |
        echo "部署到生产环境..."
        # 这里添加实际的部署脚本

  # 通知
  notify:
    name: 📢 通知
    runs-on: ubuntu-latest
    needs: [lint, build, backend-test, security]
    if: always()
    
    steps:
    - name: 📢 发送通知
      run: |
        if [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ CI/CD 流水线执行成功！"
        else
          echo "❌ CI/CD 流水线执行失败！"
        fi
